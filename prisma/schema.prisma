generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  email      String          @unique
  password   String
  name       String          @unique
  slug       String          @unique
  avatarPath String          @default("/uploads/default-avatar.png") @map("avatar-path")
  isAdmin    Boolean         @default(false) @map("is_admin")
  privacy    EnumUserPrivacy @default(PUBLIC)
  orders     Order[]
  reviews    Review[]
  favorites  Favorite[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String @unique
  description String
  slug        String @unique
  price       Int

  images  String[]
  reviews Review[]

  orderItems OrderItem[]
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId Int?        @map("category_id")
  gender     Gender?     @relation(fields: [genderId], references: [id])
  genderId   Int?        @map("gender_id")
  favorites  Favorite[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Gender {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String
  rating Int

  productId Int?     @map("product_id")
  product   Product? @relation(fields: [productId], references: [id])

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)
  items  OrderItem[]
  total  Int

  invoiceId String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}

enum EnumUserPrivacy {
  PUBLIC
  PRIVATE
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId Int?     @map("product_id")
}
